generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  phone         String?
  password      String
  role          UserRole       @default(PLAYER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  communities   CommunityMember[]
  organizedCommunities Community[]    @relation("CommunityOrganizer")
  createdCommunities  Community[]     @relation("CommunityCreator")
  matchesAsPlayer1    Match[]         @relation("Player1")
  matchesAsPlayer2    Match[]         @relation("Player2")
  matchesAsPlayer3    Match[]         @relation("Player3")
  matchesAsPlayer4    Match[]         @relation("Player4")
  indicatedBy   String?
}

enum UserRole {
  ADMIN
  ORGANIZER
  PLAYER
}

model Community {
  id          String            @id @default(cuid())
  name        String
  description String?
  location    String?
  isPrivate   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  creator     User             @relation("CommunityCreator", fields: [creatorId], references: [id])
  creatorId   String
  organizers  User[]           @relation("CommunityOrganizer")
  members     CommunityMember[]
  matches     Match[]
  rules       CommunityRule[]
}

model CommunityMember {
  id          String    @id @default(cuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  joinedAt    DateTime  @default(now())
  status      MemberStatus @default(ACTIVE)

  @@unique([communityId, userId])
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  BANNED
}

model CommunityRule {
  id          String    @id @default(cuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  rule        String
  createdAt   DateTime  @default(now())
}

model Match {
  id          String    @id @default(cuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  player1     User      @relation("Player1", fields: [player1Id], references: [id])
  player1Id   String
  player2     User      @relation("Player2", fields: [player2Id], references: [id])
  player2Id   String
  player3     User      @relation("Player3", fields: [player3Id], references: [id])
  player3Id   String
  player4     User      @relation("Player4", fields: [player4Id], references: [id])
  player4Id   String
  score       Int
  winningTeam TeamNumber
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  status      MatchStatus @default(IN_PROGRESS)
}

enum TeamNumber {
  TEAM_1
  TEAM_2
}

enum MatchStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}